<!-- # CSS GRID

## GRID

-Bidimensional
-Divisão de toda a página em linhas e colunas
-Colocar elementos onde quiser nessa divisão

## GRID OU FLEXBOX
- Grid: duas dimensões (colunas e linhas)
- Flexbox: Uma dimensão (ou coluna ou linha)
- Um complementa o trabalho do outro
- Verificar quais navegadores ainda não estão aceitando o Grid

## PROPRIEDADES

Vamos separar em 2 grupos:
container e item(s)

### CONTAINER

- display: grid;
- grid-template-columns; quantas colunas o grid possui
- grid-template-rows; quantas linhas o grid possui
- grid-gap; espaçamentos nas linhas e colunas
	- grid-row-gap - espaçamentos nas linhas
	- grid-column-gap - espaçamentos nas colunas
- grid-template-areas;

... e mais 4 propriedades e **alinhamento**

## ITEM(S)

- grid-column
	- grid-column-start
	- grid-column-end
- grid-row
	- grid-row-start
	- grid-row-end
- grid-area

... e mais 2 propriedades de **alinhamento**
 -->

 <!-- # Grid: alinhamento
 Existem 6 propriedades para o alinhamento:
 1. justify-content
 2. align-content
 3. justify-items
 4. align-items
 5. justify-self
 6. align-self -->

 <!-- Vamos separá-los em 2 grupos:
 1. justify e align
 2. content, items e self
 -->

<!-- ## justify e align

Sabendo que o grid é bidimensional, nós temos o eixo x e o y.

O eixo x é o posicionamento horizontal da esquerda para a direita

O eixo y é o posicionamento vertical de cima para baixo

## content, items e self

### content -->

<!-- justify-content(eixo x) e align-content(eixo y) nos permite alinhar o próprio grid, relativo ao espaço fora do grid.

o uso dessas propriedades são raras, pois só é aplicado caso o grid seja menor que a area definida. (Por exemplo, quando usamos em px o tamanho do grid, poderemos terminar com um grid pequeno, para o tamanho da area do grid)

Podemos usar 7 valores:
start
end
center
stretch
space-between
space-around
space-evenly -->

<!-- ### Items

justify-items e align-items vai permitir alinhar os items do nosso grid, em qualquer espaço disponível, na célula que ele habitar -->

<!-- Podemos usar 4 valores:
start
end
center
stretch -->

<!-- justify-self e align-self vai nos permitir alinhar o item em si. -->

<!-- Faz a mesma coisa que o justify-items e align-items, porém, aplicado diretamente no item de um grid -->